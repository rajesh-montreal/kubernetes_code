input {
  file {
sincedb_path => "/tmp/sincedb"
    path => "/tmp/mytest/gc.log"
    type => "report"

start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
 }
}
}

 filter{
    grok {        

	patterns_dir => ["./grok-custom-patterns"]

        match => { "message" => "(?m)%{TIMESTAMP_ISO8601:kafka.timestamp}: %{GC_REASON:gc.reason}%{G1_WORKER_STATS}%{G1_WORKER_START_STATS} %{G1_EXT_ROOT_SCAN_STATS} %{G1_UPDATE_RS_STATS} %{G1_PROCESS_BUFFER_STATS } %{G1_SCAN_RS_STATS } %{G1_CODE_ROOT_SCAN_STATS } %{G1_OBJECT_COPY_STATS} %{G1_TERMINATION_STATS} %{G1_TERMINATION_ATTEMPT_STATS}  %{G1_WORKER_OTHER_STATS} %{G1_WORKER_TOTAL_STATS} %{G1_WORKER_END_STATS} %{G1_CODE_ROOT_FIXUP} %{G1_CODE_ROOT_PURGE} %{G1_CLEAR_CT} %{G1_OTHER} %{G1_CHOOS_CSET}  %{G1_REF_PROC} %{G1_REF_ENQ} %{G1_REDIRTY_CARDS } %{G1_Humon1} %{G1_Humon2} %{G1_FREE_CSET} %{G1_HEAP_POOLS_AFTER_GC }?%{GC_PART_DURATION}"}

    }
   }

output {
 stdout { codec => rubydebug }

}
