[2016-12-19 18:01:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [test,0] -> List(2, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [test,3] -> List(2, 1), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [test,5] -> List(1, 0), [test,2] -> List(1, 2), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,34] -> List(1, 2, 0), [test2,0] -> List(1), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [test,4] -> List(0, 2), [test,1] -> List(0, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:01:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:02:17,980] DEBUG [DeleteTopicsListener on 0]: Delete topics listener fired for topics test2 to be deleted (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:02:17,981] INFO [DeleteTopicsListener on 0]: Starting topic deletion for topics test2 (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:02:17,992] INFO [delete-topics-thread-0], Handling deletion for topics test2 (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:18,002] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test2 deleted Map([Topic=test2,Partition=0,Replica=1] -> OnlineReplica) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,013] INFO [delete-topics-thread-0], Deletion of topic test2 (re)started (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:18,014] INFO [Topic Deletion Manager 0], Topic deletion callback for test2 (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,032] INFO [Controller-0-to-broker-0-send-thread], Controller 0 connected to kafka0:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:02:18,039] INFO [Topic Deletion Manager 0], Partition deletion callback for [test2,0] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,048] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,061] DEBUG [Controller 0]: Removing replica 1 from ISR 1 for partition [test2,0]. (kafka.controller.KafkaController)
[2016-12-19 18:02:18,075] INFO [Controller 0]: New leader and ISR for partition [test2,0] is {"leader":-1,"leader_epoch":10,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:18,078] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:18,079] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test2,Partition=0,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:18,080] DEBUG [Topic Deletion Manager 0], Deletion started for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,081] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionStarted for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,082] DEBUG The stop replica request (delete = true) sent to broker 1 is [Topic=test2,Partition=0,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:18,082] DEBUG The stop replica request (delete = false) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:18,082] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,136] INFO [Controller-0-to-broker-1-send-thread], Controller 0 connected to kafka1:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:02:18,137] INFO [Controller-0-to-broker-2-send-thread], Controller 0 connected to kafka2:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:02:18,170] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test2,partition=0,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,174] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,174] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,175] INFO [delete-topics-thread-0], Handling deletion for topics test2 (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:18,175] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test2 deleted Map([Topic=test2,Partition=0,Replica=1] -> ReplicaDeletionSuccessful) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,175] INFO [Replica state machine on controller 0]: Invoking state change to NonExistentReplica for replicas [Topic=test2,Partition=0,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:18,177] INFO [Partition state machine on Controller 0]: Invoking state change to OfflinePartition for partitions [test2,0] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:02:18,182] INFO [Partition state machine on Controller 0]: Invoking state change to NonExistentPartition for partitions [test2,0] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:02:18,204] INFO [delete-topics-thread-0], Deletion of topic test2 successfully completed (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:18,205] DEBUG [TopicChangeListener on Controller 0]: Topic change listener fired for path /brokers/topics with children test,__consumer_offsets (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:02:18,206] INFO [TopicChangeListener on Controller 0]: New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:02:18,206] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:18,207] DEBUG [DeleteTopicsListener on 0]: Delete topics listener fired for topics  to be deleted (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:02:24,118] DEBUG [DeleteTopicsListener on 0]: Delete topics listener fired for topics test to be deleted (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:02:24,118] INFO [DeleteTopicsListener on 0]: Starting topic deletion for topics test (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:02:24,118] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,118] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> OnlineReplica, [Topic=test,Partition=2,Replica=1] -> OnlineReplica, [Topic=test,Partition=5,Replica=0] -> OnlineReplica, [Topic=test,Partition=4,Replica=2] -> OnlineReplica, [Topic=test,Partition=3,Replica=1] -> OnlineReplica, [Topic=test,Partition=2,Replica=2] -> OnlineReplica, [Topic=test,Partition=0,Replica=2] -> OnlineReplica, [Topic=test,Partition=1,Replica=0] -> OnlineReplica, [Topic=test,Partition=4,Replica=0] -> OnlineReplica, [Topic=test,Partition=5,Replica=1] -> OnlineReplica, [Topic=test,Partition=3,Replica=2] -> OnlineReplica, [Topic=test,Partition=1,Replica=1] -> OnlineReplica) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,118] INFO [delete-topics-thread-0], Deletion of topic test (re)started (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,118] INFO [Topic Deletion Manager 0], Topic deletion callback for test (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,125] INFO [Topic Deletion Manager 0], Partition deletion callback for [test,4],[test,1],[test,2],[test,5],[test,0],[test,3] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,132] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=test,Partition=0,Replica=0],[Topic=test,Partition=2,Replica=1],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=4,Replica=0],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=3,Replica=2],[Topic=test,Partition=1,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,132] DEBUG [Controller 0]: Removing replica 0 from ISR 0,2 for partition [test,0]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,157] INFO [Controller 0]: New leader and ISR for partition [test,0] is {"leader":2,"leader_epoch":24,"isr":[2]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,157] DEBUG [Controller 0]: Removing replica 1 from ISR 1,2 for partition [test,2]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,172] INFO [Controller 0]: New leader and ISR for partition [test,2] is {"leader":-1,"leader_epoch":17,"isr":[2]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,172] DEBUG [Controller 0]: Removing replica 0 from ISR 0,1 for partition [test,5]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,175] INFO [Controller 0]: New leader and ISR for partition [test,5] is {"leader":1,"leader_epoch":24,"isr":[1]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,175] DEBUG [Controller 0]: Removing replica 2 from ISR 0,2 for partition [test,4]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,179] INFO [Controller 0]: New leader and ISR for partition [test,4] is {"leader":0,"leader_epoch":29,"isr":[0]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,179] DEBUG [Controller 0]: Removing replica 1 from ISR 1,2 for partition [test,3]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,182] INFO [Controller 0]: New leader and ISR for partition [test,3] is {"leader":2,"leader_epoch":21,"isr":[2]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,182] DEBUG [Controller 0]: Removing replica 2 from ISR 2 for partition [test,2]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,190] INFO [Controller 0]: New leader and ISR for partition [test,2] is {"leader":-1,"leader_epoch":18,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,190] DEBUG [Controller 0]: Removing replica 2 from ISR 2 for partition [test,0]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,195] INFO [Controller 0]: New leader and ISR for partition [test,0] is {"leader":-1,"leader_epoch":25,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,195] DEBUG [Controller 0]: Removing replica 0 from ISR 0,1 for partition [test,1]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,218] INFO [Controller 0]: New leader and ISR for partition [test,1] is {"leader":-1,"leader_epoch":29,"isr":[1]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,218] DEBUG [Controller 0]: Removing replica 0 from ISR 0 for partition [test,4]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,221] INFO [Controller 0]: New leader and ISR for partition [test,4] is {"leader":-1,"leader_epoch":30,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,221] DEBUG [Controller 0]: Removing replica 1 from ISR 1 for partition [test,5]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,225] INFO [Controller 0]: New leader and ISR for partition [test,5] is {"leader":-1,"leader_epoch":25,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,226] DEBUG [Controller 0]: Removing replica 2 from ISR 2 for partition [test,3]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,236] INFO [Controller 0]: New leader and ISR for partition [test,3] is {"leader":-1,"leader_epoch":22,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,237] DEBUG [Controller 0]: Removing replica 1 from ISR 1 for partition [test,1]. (kafka.controller.KafkaController)
[2016-12-19 18:02:24,240] INFO [Controller 0]: New leader and ISR for partition [test,1] is {"leader":-1,"leader_epoch":30,"isr":[]} (kafka.controller.KafkaController)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = true) sent to broker 2 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = false) sent to broker 2 is [Topic=test,Partition=4,Replica=2],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=3,Replica=2] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test,Partition=2,Replica=1],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=1,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = true) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = false) sent to broker 0 is [Topic=test,Partition=0,Replica=0],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=4,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG [Topic Deletion Manager 0], Deletion started for replicas [Topic=test,Partition=0,Replica=0],[Topic=test,Partition=2,Replica=1],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=4,Replica=0],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=3,Replica=2],[Topic=test,Partition=1,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,240] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionStarted for replicas [Topic=test,Partition=0,Replica=0],[Topic=test,Partition=2,Replica=1],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=4,Replica=0],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=3,Replica=2],[Topic=test,Partition=1,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = true) sent to broker 2 is [Topic=test,Partition=4,Replica=2],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=3,Replica=2] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = false) sent to broker 2 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = true) sent to broker 1 is [Topic=test,Partition=2,Replica=1],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=1,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,240] DEBUG The stop replica request (delete = false) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,241] DEBUG The stop replica request (delete = true) sent to broker 0 is [Topic=test,Partition=0,Replica=0],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=4,Replica=0] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,241] DEBUG The stop replica request (delete = false) sent to broker 0 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:02:24,241] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,278] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=4,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,279] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=4,Replica=2] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,279] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=4,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,279] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,279] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,281] INFO [delete-topics-thread-0], Deletion for replicas 1,0,2 for partition [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,282] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,283] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=2,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,289] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=2,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,289] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=2,Replica=2] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,289] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=2,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,290] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,290] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,290] INFO [delete-topics-thread-0], Deletion for replicas 1,0,2 for partition [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,290] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,290] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=2,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,291] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=2,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,291] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,292] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,292] INFO [delete-topics-thread-0], Deletion for replicas 0,1,2 for partition [test,4],[test,0],[test,3],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,292] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,299] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=0,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,301] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=0,Replica=2] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,301] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=0,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,302] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,302] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,302] INFO [delete-topics-thread-0], Deletion for replicas 0,1,2 for partition [test,4],[test,0],[test,3],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,303] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,311] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=3,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,312] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=3,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,312] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=3,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,312] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,312] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionStarted, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,311] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=3,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,314] INFO [delete-topics-thread-0], Deletion for replicas 0,1,2 for partition [test,4],[test,0],[test,3],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,314] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=3,Replica=2] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,314] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=3,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,315] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,315] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionStarted, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,315] INFO [delete-topics-thread-0], Deletion for replicas 0,1 for partition [test,4],[test,1],[test,5],[test,0] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,315] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,333] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=5,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,333] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=5,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,334] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=5,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,334] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,334] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,335] INFO [delete-topics-thread-0], Deletion for replicas 0,1 for partition [test,4],[test,1],[test,0],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,335] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,339] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=0,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,347] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,347] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=0,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,348] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,351] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionStarted) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,350] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=1,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,357] INFO [delete-topics-thread-0], Deletion for replicas 0,1 for partition [test,4],[test,1],[test,5] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,362] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=1,Replica=1] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,362] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=1,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,363] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,363] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionSuccessful) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,367] INFO [delete-topics-thread-0], Deletion for replicas 0 for partition [test,4],[test,5],[test,1] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,367] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,368] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=5,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,368] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=5,Replica=0] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,368] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=5,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,370] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,379] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=1,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,384] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionSuccessful) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,384] INFO [delete-topics-thread-0], Deletion for replicas 0 for partition [test,4],[test,1] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,386] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=1,Replica=0] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,388] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=1,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,391] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,392] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionStarted, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionSuccessful) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,392] INFO [delete-topics-thread-0], Deletion for replicas 0 for partition [test,4] of topic test in progress (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,392] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,400] DEBUG [Topic Deletion Manager 0], Delete topic callback invoked for {error_code=0,partitions=[{topic=test,partition=4,error_code=0}]} (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,404] DEBUG [Topic Deletion Manager 0], Deletion successfully completed for replicas [Topic=test,Partition=4,Replica=0] (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,404] INFO [Replica state machine on controller 0]: Invoking state change to ReplicaDeletionSuccessful for replicas [Topic=test,Partition=4,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,404] INFO [delete-topics-thread-0], Handling deletion for topics test (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,405] DEBUG [Replica state machine on controller 0]: Are all replicas for topic test deleted Map([Topic=test,Partition=0,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=4,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=2,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=0,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=4,Replica=0] -> ReplicaDeletionSuccessful, [Topic=test,Partition=5,Replica=1] -> ReplicaDeletionSuccessful, [Topic=test,Partition=3,Replica=2] -> ReplicaDeletionSuccessful, [Topic=test,Partition=1,Replica=1] -> ReplicaDeletionSuccessful) (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,405] INFO [Replica state machine on controller 0]: Invoking state change to NonExistentReplica for replicas [Topic=test,Partition=2,Replica=1],[Topic=test,Partition=4,Replica=0],[Topic=test,Partition=1,Replica=1],[Topic=test,Partition=2,Replica=2],[Topic=test,Partition=5,Replica=1],[Topic=test,Partition=0,Replica=0],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=3,Replica=2],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=1,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:02:24,406] INFO [Partition state machine on Controller 0]: Invoking state change to OfflinePartition for partitions [test,4],[test,1],[test,2],[test,5],[test,0],[test,3] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:02:24,407] INFO [Partition state machine on Controller 0]: Invoking state change to NonExistentPartition for partitions [test,4],[test,1],[test,2],[test,5],[test,0],[test,3] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:02:24,454] INFO [delete-topics-thread-0], Deletion of topic test successfully completed (kafka.controller.TopicDeletionManager$DeleteTopicsThread)
[2016-12-19 18:02:24,454] DEBUG [Topic Deletion Manager 0], Waiting for signal to start or continue topic deletion (kafka.controller.TopicDeletionManager)
[2016-12-19 18:02:24,454] DEBUG [TopicChangeListener on Controller 0]: Topic change listener fired for path /brokers/topics with children __consumer_offsets (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:02:24,454] INFO [TopicChangeListener on Controller 0]: New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:02:24,456] DEBUG [DeleteTopicsListener on 0]: Delete topics listener fired for topics  to be deleted (kafka.controller.PartitionStateMachine$DeleteTopicsListener)
[2016-12-19 18:03:39,023] DEBUG [TopicChangeListener on Controller 0]: Topic change listener fired for path /brokers/topics with children test,__consumer_offsets (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:03:39,025] INFO [TopicChangeListener on Controller 0]: New topics: [Set(test)], deleted topics: [Set()], new partition replica assignment [Map([test,4] -> List(2, 1), [test,1] -> List(2, 0), [test,2] -> List(0, 1), [test,5] -> List(0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0))] (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-12-19 18:03:39,032] INFO [Controller 0]: New topic creation callback for [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] (kafka.controller.KafkaController)
[2016-12-19 18:03:39,034] INFO [Controller 0]: New partition creation callback for [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] (kafka.controller.KafkaController)
[2016-12-19 18:03:39,034] INFO [Partition state machine on Controller 0]: Invoking state change to NewPartition for partitions [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,035] INFO [Replica state machine on controller 0]: Invoking state change to NewReplica for replicas [Topic=test,Partition=1,Replica=2],[Topic=test,Partition=2,Replica=1],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=2,Replica=0],[Topic=test,Partition=0,Replica=1],[Topic=test,Partition=4,Replica=1],[Topic=test,Partition=3,Replica=0],[Topic=test,Partition=5,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:03:39,050] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [test,4],[test,0],[test,3],[test,2],[test,1],[test,5] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,053] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,4] are: [List(2, 1)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,053] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,4] to (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,065] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,0] are: [List(1, 2)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,065] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,0] to (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,070] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,3] are: [List(1, 0)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,070] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,3] to (Leader:1,ISR:1,0,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,075] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,2] are: [List(0, 1)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,075] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,2] to (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,082] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,1] are: [List(2, 0)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,082] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,1] to (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,092] DEBUG [Partition state machine on Controller 0]: Live assigned replicas for partition [test,5] are: [List(0, 2)] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,092] DEBUG [Partition state machine on Controller 0]: Initializing leader and isr for partition [test,5] to (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:03:39,127] INFO [Replica state machine on controller 0]: Invoking state change to OnlineReplica for replicas [Topic=test,Partition=1,Replica=2],[Topic=test,Partition=2,Replica=1],[Topic=test,Partition=5,Replica=0],[Topic=test,Partition=4,Replica=2],[Topic=test,Partition=3,Replica=1],[Topic=test,Partition=0,Replica=2],[Topic=test,Partition=1,Replica=0],[Topic=test,Partition=2,Replica=0],[Topic=test,Partition=0,Replica=1],[Topic=test,Partition=4,Replica=1],[Topic=test,Partition=3,Replica=0],[Topic=test,Partition=5,Replica=2] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:06:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:06:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:11:53,611] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:11:53,616] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:11:53,617] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:11:53,617] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:11:53,617] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:11:53,617] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:11:53,618] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:11:53,618] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:14:38,578] INFO [Controller 0]: Shutting down broker 1 (kafka.controller.KafkaController)
[2016-12-19 18:14:38,580] DEBUG [Controller 0]: All shutting down brokers: 1 (kafka.controller.KafkaController)
[2016-12-19 18:14:38,580] DEBUG [Controller 0]: Live brokers: 0,2 (kafka.controller.KafkaController)
[2016-12-19 18:14:38,605] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,43] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,613] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,43] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,616] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:1,ISR:1,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,628] INFO [Controller-0-to-broker-0-send-thread], Controller 0 connected to kafka0:9092 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:14:38,628] INFO [Controller-0-to-broker-1-send-thread], Controller 0 connected to kafka1:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:14:38,624] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,634] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=14,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,634] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=14,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,634] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,14]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,664] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,14] is {"leader":2,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,678] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,678] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=14,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,678] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,28] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,705] INFO [Controller-0-to-broker-2-send-thread], Controller 0 connected to kafka2:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2016-12-19 18:14:38,722] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,28] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,724] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:1,ISR:1,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,743] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,4] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,746] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,4] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,748] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,1,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:1,ISR:1,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,769] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,769] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=36,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,769] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=36,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,769] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,36]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,774] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,36] is {"leader":0,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,794] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,794] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=36,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,795] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,795] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=6,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,795] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=6,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,795] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,6]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,802] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,6] is {"leader":0,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,814] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,814] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=6,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,815] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,815] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=39,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,815] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=39,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,815] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,39]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,818] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,39] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,825] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,825] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=39,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,826] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,826] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=23,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,826] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=23,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,827] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,23]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,831] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,23] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,838] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,838] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=23,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,840] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,840] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=24,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,840] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=24,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,840] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,24]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,844] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,24] is {"leader":0,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,848] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,849] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=24,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,849] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,849] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=38,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,849] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=38,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,849] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,38]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,854] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,38] is {"leader":2,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,862] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,862] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=38,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,862] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,16] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,865] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,16] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,867] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:1,ISR:1,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,882] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,882] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=3,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,882] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=3,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,882] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,3]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,887] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,3] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,893] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,894] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=3,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,895] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,895] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=21,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,895] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=21,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:38,895] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,21]. (kafka.controller.KafkaController)
[2016-12-19 18:14:38,898] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,21] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:38,906] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,906] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=21,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:38,906] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [test,3] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,909] DEBUG [ControlledShutdownLeaderSelector]: Partition [test,3] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,912] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,919] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,10] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:38,956] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,10] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:38,959] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,000] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,40] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,020] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,40] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,025] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,049] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,34] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,050] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,34] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,052] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,072] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,25] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,075] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,25] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,079] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,101] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,101] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=27,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,101] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=27,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,101] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,27]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,108] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,27] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,116] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,116] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=27,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,116] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,116] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=42,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,117] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=42,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,117] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,42]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,120] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,42] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,130] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,130] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=42,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,131] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,131] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=11,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,131] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=11,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,131] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,11]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,135] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,11] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,147] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,147] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=11,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,147] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,7] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,151] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,7] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,153] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,173] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,175] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=47,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,176] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=47,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,179] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,47]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,203] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,47] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,232] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,233] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=47,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,240] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,240] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=9,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,241] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=9,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,241] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,9]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,260] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,9] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,273] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,273] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=9,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,273] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,13] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,280] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,13] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,295] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,347] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,347] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=29,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,348] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=29,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,350] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,29]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,367] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,29] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,392] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,392] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=29,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,396] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,396] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=8,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,400] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=8,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,417] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,8]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,430] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,8] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,435] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,436] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=8,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,440] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,22] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,441] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,22] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,443] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,461] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,31] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,462] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,31] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,469] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,488] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,488] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=18,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,489] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=18,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,511] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,18]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,532] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,18] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,540] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,540] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=18,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,540] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,540] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=20,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,540] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=20,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,541] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,20]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,557] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,20] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,606] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,606] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=20,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,608] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,37] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,616] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,37] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,620] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,640] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,49] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,657] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,49] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,661] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,701] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,701] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=12,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,704] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=12,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,704] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,12]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,715] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,12] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,725] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,725] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=12,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,731] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,731] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=5,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,732] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=5,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,732] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,5]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,735] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,5] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,748] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,748] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=5,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,749] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,749] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=32,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,749] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=32,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,749] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,32]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,761] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,32] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,771] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,771] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=32,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,772] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,772] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=2,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,772] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=2,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,772] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,2]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,783] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,2] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,794] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,794] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=2,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,796] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,1] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,803] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,1] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,806] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,1,LeaderEpoch:0,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:1,ISR:1,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,877] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,877] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=0,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,877] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=0,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,877] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,0]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,883] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,0] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,892] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,892] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=0,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,892] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,892] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test,Partition=4,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,892] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=test,Partition=4,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,893] DEBUG [Controller 0]: Removing replica 1 from ISR 2,1 for partition [test,4]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,905] INFO [Controller 0]: New leader and ISR for partition [test,4] is {"leader":2,"leader_epoch":1,"isr":[2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,906] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,906] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test,Partition=4,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,907] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,907] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=15,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,907] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=15,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,907] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,15]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,914] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,15] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,923] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,924] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=15,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,924] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,924] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=44,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,924] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=44,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,924] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,44]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,929] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,44] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,936] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,936] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=44,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,939] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,939] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=17,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,939] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=17,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,939] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,17]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,942] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,17] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,948] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,948] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=17,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,949] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [test,0] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,951] DEBUG [ControlledShutdownLeaderSelector]: Partition [test,0] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:39,954] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,1,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,1,2,LeaderEpoch:53,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:39,955] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,956] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=48,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,956] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=48,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,956] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,48]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,966] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,48] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:39,966] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,966] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=48,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,966] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,966] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=26,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:39,966] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=26,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:39,967] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,26]. (kafka.controller.KafkaController)
[2016-12-19 18:14:39,987] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,26] is {"leader":2,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,014] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,014] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=26,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,016] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,019] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=33,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,019] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=33,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,019] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,33]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,023] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,33] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,033] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,033] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=33,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,036] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,036] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=41,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,036] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=41,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,036] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,41]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,042] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,41] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,054] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,055] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=41,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,055] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,055] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=45,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,055] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=45,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,058] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,45]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,064] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,45] is {"leader":0,"leader_epoch":57,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,072] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,072] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=45,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,073] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,073] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=35,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,073] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=35,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,073] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,35]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,092] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,35] is {"leader":2,"leader_epoch":54,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,102] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,102] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=35,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,104] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,46] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:40,106] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,46] : current leader = 1, new leader = 2 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:40,109] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:1,ISR:0,1,2,LeaderEpoch:50,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:40,119] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions [__consumer_offsets,19] (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:40,120] DEBUG [ControlledShutdownLeaderSelector]: Partition [__consumer_offsets,19] : current leader = 1, new leader = 0 (kafka.controller.ControlledShutdownLeaderSelector)
[2016-12-19 18:14:40,123] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([__consumer_offsets,19] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,30] -> (Leader:0,ISR:0,1,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,41] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [test,4] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,17] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,26] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,0] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,33] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [test,2] -> (Leader:0,ISR:0,1,LeaderEpoch:0,ControllerEpoch:36), [__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,5] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,12] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,15] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,48] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,44] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,46] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,45] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [__consumer_offsets,32] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,35] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36), [__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [test,0] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36), [__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36), [test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36), [__consumer_offsets,1] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36), [__consumer_offsets,2] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36), [__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36)) (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:40,132] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,132] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=30,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,132] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=30,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,132] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1,2 for partition [__consumer_offsets,30]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,135] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,30] is {"leader":0,"leader_epoch":55,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,136] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,136] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=30,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,136] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,136] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test,Partition=2,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,136] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=test,Partition=2,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:40,136] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1 for partition [test,2]. (kafka.controller.KafkaController)
[2016-12-19 18:14:40,140] INFO [Controller 0]: New leader and ISR for partition [test,2] is {"leader":0,"leader_epoch":1,"isr":[0]} (kafka.controller.KafkaController)
[2016-12-19 18:14:40,141] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,141] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=test,Partition=2,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:40,142] TRACE [Controller 0]: All leaders = [__consumer_offsets,19] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,30] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,47] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,29] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,41] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[test,4] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36),[test,1] -> (Leader:2,ISR:2,0,LeaderEpoch:0,ControllerEpoch:36),[__consumer_offsets,39] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,10] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,17] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,14] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36),[__consumer_offsets,40] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,18] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,0] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,26] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,24] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36),[__consumer_offsets,33] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[test,5] -> (Leader:0,ISR:0,2,LeaderEpoch:0,ControllerEpoch:36),[__consumer_offsets,20] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[test,2] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36),[__consumer_offsets,3] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,21] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,22] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,5] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,12] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,8] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,23] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,15] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,11] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,48] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,13] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,49] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,6] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36),[__consumer_offsets,28] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,4] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,37] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,31] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,44] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,42] -> (Leader:0,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,34] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,46] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,25] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,45] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,27] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,32] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36),[__consumer_offsets,43] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,36] -> (Leader:0,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36),[__consumer_offsets,35] -> (Leader:2,ISR:0,2,LeaderEpoch:54,ControllerEpoch:36),[__consumer_offsets,7] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[test,0] -> (Leader:2,ISR:2,LeaderEpoch:1,ControllerEpoch:36),[__consumer_offsets,9] -> (Leader:0,ISR:0,2,LeaderEpoch:57,ControllerEpoch:36),[__consumer_offsets,38] -> (Leader:2,ISR:0,2,LeaderEpoch:56,ControllerEpoch:36),[test,3] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:36),[__consumer_offsets,1] -> (Leader:0,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,16] -> (Leader:2,ISR:0,2,LeaderEpoch:51,ControllerEpoch:36),[__consumer_offsets,2] -> (Leader:2,ISR:0,2,LeaderEpoch:55,ControllerEpoch:36) (kafka.controller.KafkaController)
[2016-12-19 18:14:40,211] WARN [Controller-0-to-broker-1-send-thread], Controller 0 epoch 36 fails to send request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=35}]} to broker kafka1:9092 (id: 1 rack: null). Reconnecting to broker. (kafka.controller.RequestSendThread)
java.io.IOException: Connection to 1 was disconnected before the response was read
	at kafka.utils.NetworkClientBlockingOps$$anonfun$blockingSendAndReceive$extension$1$$anonfun$apply$1.apply(NetworkClientBlockingOps.scala:115)
	at kafka.utils.NetworkClientBlockingOps$$anonfun$blockingSendAndReceive$extension$1$$anonfun$apply$1.apply(NetworkClientBlockingOps.scala:112)
	at scala.Option.foreach(Option.scala:257)
	at kafka.utils.NetworkClientBlockingOps$$anonfun$blockingSendAndReceive$extension$1.apply(NetworkClientBlockingOps.scala:112)
	at kafka.utils.NetworkClientBlockingOps$$anonfun$blockingSendAndReceive$extension$1.apply(NetworkClientBlockingOps.scala:108)
	at kafka.utils.NetworkClientBlockingOps$.recursivePoll$1(NetworkClientBlockingOps.scala:137)
	at kafka.utils.NetworkClientBlockingOps$.kafka$utils$NetworkClientBlockingOps$$pollContinuously$extension(NetworkClientBlockingOps.scala:143)
	at kafka.utils.NetworkClientBlockingOps$.blockingSendAndReceive$extension(NetworkClientBlockingOps.scala:108)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:190)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,351] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,453] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,553] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,654] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,756] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,857] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:40,958] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,059] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,160] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,261] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,363] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,414] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:41,420] DEBUG Sending MetadataRequest to Brokers:ArrayBuffer(0, 1, 2) for TopicAndPartitions:Set([__consumer_offsets,16], [__consumer_offsets,4], [__consumer_offsets,28]) (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:41,424] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:41,467] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,569] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,670] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,772] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,874] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:41,975] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,076] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,180] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,283] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,395] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,411] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:42,423] DEBUG Sending MetadataRequest to Brokers:ArrayBuffer(0, 1, 2) for TopicAndPartitions:Set([__consumer_offsets,48], [__consumer_offsets,30], [test,2]) (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:42,428] DEBUG [IsrChangeNotificationListener] Fired!!! (kafka.controller.IsrChangeNotificationListener)
[2016-12-19 18:14:42,496] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,598] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,699] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,800] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:42,902] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,004] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,106] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,207] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,309] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,412] WARN [Controller-0-to-broker-1-send-thread], Controller 0's connection to broker kafka1:9092 (id: 1 rack: null) was unsuccessful (kafka.controller.RequestSendThread)
java.io.IOException: Connection to kafka1:9092 (id: 1 rack: null) failed
	at kafka.utils.NetworkClientBlockingOps$.awaitReady$1(NetworkClientBlockingOps.scala:83)
	at kafka.utils.NetworkClientBlockingOps$.blockingReady$extension(NetworkClientBlockingOps.scala:93)
	at kafka.controller.RequestSendThread.brokerReady(ControllerChannelManager.scala:230)
	at kafka.controller.RequestSendThread.liftedTree1$1(ControllerChannelManager.scala:182)
	at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:181)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
[2016-12-19 18:14:43,437] INFO [BrokerChangeListener on Controller 0]: Broker change listener fired for path /brokers/ids with children 0,2 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-12-19 18:14:43,446] INFO [BrokerChangeListener on Controller 0]: Newly added brokers: , deleted brokers: 1, all live brokers: 0,2 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-12-19 18:14:43,448] INFO [Controller-0-to-broker-1-send-thread], Shutting down (kafka.controller.RequestSendThread)
[2016-12-19 18:14:43,448] INFO [Controller-0-to-broker-1-send-thread], Stopped  (kafka.controller.RequestSendThread)
[2016-12-19 18:14:43,448] INFO [Controller-0-to-broker-1-send-thread], Shutdown completed (kafka.controller.RequestSendThread)
[2016-12-19 18:14:43,450] INFO [Controller 0]: Broker failure callback for 1 (kafka.controller.KafkaController)
[2016-12-19 18:14:43,456] INFO [Controller 0]: Removed ArrayBuffer(1) from list of shutting down brokers. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,462] INFO [Partition state machine on Controller 0]: Invoking state change to OfflinePartition for partitions  (kafka.controller.PartitionStateMachine)
[2016-12-19 18:14:43,469] INFO [Replica state machine on controller 0]: Invoking state change to OfflineReplica for replicas [Topic=__consumer_offsets,Partition=28,Replica=1],[Topic=__consumer_offsets,Partition=48,Replica=1],[Topic=__consumer_offsets,Partition=5,Replica=1],[Topic=__consumer_offsets,Partition=21,Replica=1],[Topic=__consumer_offsets,Partition=2,Replica=1],[Topic=__consumer_offsets,Partition=18,Replica=1],[Topic=__consumer_offsets,Partition=23,Replica=1],[Topic=__consumer_offsets,Partition=9,Replica=1],[Topic=__consumer_offsets,Partition=39,Replica=1],[Topic=__consumer_offsets,Partition=31,Replica=1],[Topic=__consumer_offsets,Partition=19,Replica=1],[Topic=__consumer_offsets,Partition=10,Replica=1],[Topic=__consumer_offsets,Partition=22,Replica=1],[Topic=__consumer_offsets,Partition=43,Replica=1],[Topic=__consumer_offsets,Partition=40,Replica=1],[Topic=__consumer_offsets,Partition=27,Replica=1],[Topic=__consumer_offsets,Partition=6,Replica=1],[Topic=__consumer_offsets,Partition=1,Replica=1],[Topic=__consumer_offsets,Partition=47,Replica=1],[Topic=__consumer_offsets,Partition=30,Replica=1],[Topic=__consumer_offsets,Partition=42,Replica=1],[Topic=__consumer_offsets,Partition=41,Replica=1],[Topic=test,Partition=2,Replica=1],[Topic=__consumer_offsets,Partition=3,Replica=1],[Topic=__consumer_offsets,Partition=13,Replica=1],[Topic=__consumer_offsets,Partition=4,Replica=1],[Topic=__consumer_offsets,Partition=16,Replica=1],[Topic=__consumer_offsets,Partition=46,Replica=1],[Topic=test,Partition=3,Replica=1],[Topic=__consumer_offsets,Partition=49,Replica=1],[Topic=__consumer_offsets,Partition=14,Replica=1],[Topic=__consumer_offsets,Partition=45,Replica=1],[Topic=__consumer_offsets,Partition=37,Replica=1],[Topic=__consumer_offsets,Partition=29,Replica=1],[Topic=__consumer_offsets,Partition=20,Replica=1],[Topic=__consumer_offsets,Partition=8,Replica=1],[Topic=__consumer_offsets,Partition=38,Replica=1],[Topic=__consumer_offsets,Partition=7,Replica=1],[Topic=__consumer_offsets,Partition=0,Replica=1],[Topic=__consumer_offsets,Partition=34,Replica=1],[Topic=__consumer_offsets,Partition=33,Replica=1],[Topic=__consumer_offsets,Partition=26,Replica=1],[Topic=__consumer_offsets,Partition=44,Replica=1],[Topic=__consumer_offsets,Partition=32,Replica=1],[Topic=__consumer_offsets,Partition=25,Replica=1],[Topic=__consumer_offsets,Partition=11,Replica=1],[Topic=__consumer_offsets,Partition=36,Replica=1],[Topic=test,Partition=0,Replica=1],[Topic=__consumer_offsets,Partition=12,Replica=1],[Topic=__consumer_offsets,Partition=35,Replica=1],[Topic=__consumer_offsets,Partition=15,Replica=1],[Topic=test,Partition=4,Replica=1],[Topic=__consumer_offsets,Partition=17,Replica=1],[Topic=__consumer_offsets,Partition=24,Replica=1] (kafka.controller.ReplicaStateMachine)
[2016-12-19 18:14:43,470] DEBUG [Controller 0]: Removing replica 1 from ISR 2,0 for partition [__consumer_offsets,28]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,478] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,28] since it is not in the ISR. Leader = 2 ; ISR = List(2, 0) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,479] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2,1 for partition [__consumer_offsets,48]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,487] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,48] is {"leader":0,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:43,487] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,5]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,489] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,5] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,489] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,21]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,490] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,21] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,491] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,2]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,492] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,2] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,492] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,18]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,493] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,18] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,494] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,23]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,496] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,23] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,496] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,9]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,498] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,9] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,498] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,39]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,499] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,39] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,499] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,31]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,501] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,31] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,501] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,19]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,502] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,19] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,503] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,10]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,504] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,10] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,504] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,22]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,506] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,22] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,507] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,43]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,530] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,43] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,530] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,40]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,533] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,40] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,533] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,27]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,537] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,27] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,537] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,6]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,540] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,6] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,541] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,1]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,544] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,1] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,544] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,47]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,546] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,47] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,547] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2,1 for partition [__consumer_offsets,30]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,555] INFO [Controller 0]: New leader and ISR for partition [__consumer_offsets,30] is {"leader":0,"leader_epoch":56,"isr":[0,2]} (kafka.controller.KafkaController)
[2016-12-19 18:14:43,555] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,42]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,557] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,42] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,557] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,41]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,559] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,41] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,559] DEBUG [Controller 0]: Removing replica 1 from ISR 0,1 for partition [test,2]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,566] INFO [Controller 0]: New leader and ISR for partition [test,2] is {"leader":0,"leader_epoch":2,"isr":[0]} (kafka.controller.KafkaController)
[2016-12-19 18:14:43,567] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,3]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,568] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,3] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,568] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,13]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,569] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,13] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,569] DEBUG [Controller 0]: Removing replica 1 from ISR 2,0 for partition [__consumer_offsets,4]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,571] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,4] since it is not in the ISR. Leader = 2 ; ISR = List(2, 0) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,571] DEBUG [Controller 0]: Removing replica 1 from ISR 2,0 for partition [__consumer_offsets,16]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,572] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,16] since it is not in the ISR. Leader = 2 ; ISR = List(2, 0) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,572] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,46]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,574] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,46] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,574] DEBUG [Controller 0]: Removing replica 1 from ISR 0 for partition [test,3]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,575] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [test,3] since it is not in the ISR. Leader = 0 ; ISR = List(0) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,576] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,49]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,577] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,49] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,577] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,14]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,578] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,14] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,579] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,45]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,580] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,45] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,580] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,37]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,582] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,37] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,582] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,29]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,583] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,29] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,583] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,20]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,584] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,20] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,585] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,8]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,586] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,8] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,586] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,38]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,587] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,38] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,587] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,7]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,596] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,7] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,596] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,0]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,598] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,0] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,598] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,34]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,601] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,34] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,601] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,33]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,603] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,33] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,603] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,26]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,606] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,26] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,606] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,44]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,615] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,44] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,615] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,32]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,623] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,32] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,626] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,25]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,628] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,25] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,628] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,11]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,632] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,11] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,632] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,36]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,636] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,36] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,636] DEBUG [Controller 0]: Removing replica 1 from ISR 2 for partition [test,0]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,639] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [test,0] since it is not in the ISR. Leader = 2 ; ISR = List(2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,642] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,12]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,646] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,12] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,647] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,35]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,651] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,35] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,652] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,15]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,654] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,15] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,655] DEBUG [Controller 0]: Removing replica 1 from ISR 2 for partition [test,4]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,657] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [test,4] since it is not in the ISR. Leader = 2 ; ISR = List(2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,657] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,17]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,660] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,17] since it is not in the ISR. Leader = 2 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,661] DEBUG [Controller 0]: Removing replica 1 from ISR 0,2 for partition [__consumer_offsets,24]. (kafka.controller.KafkaController)
[2016-12-19 18:14:43,663] WARN [Controller 0]: Cannot remove replica 1 from ISR of partition [__consumer_offsets,24] since it is not in the ISR. Leader = 0 ; ISR = List(0, 2) (kafka.controller.KafkaController)
[2016-12-19 18:14:43,685] DEBUG The stop replica request (delete = true) sent to broker 1 is  (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:43,685] DEBUG The stop replica request (delete = false) sent to broker 1 is [Topic=__consumer_offsets,Partition=28,Replica=1],[Topic=__consumer_offsets,Partition=48,Replica=1],[Topic=__consumer_offsets,Partition=5,Replica=1],[Topic=__consumer_offsets,Partition=21,Replica=1],[Topic=__consumer_offsets,Partition=2,Replica=1],[Topic=__consumer_offsets,Partition=18,Replica=1],[Topic=__consumer_offsets,Partition=23,Replica=1],[Topic=__consumer_offsets,Partition=9,Replica=1],[Topic=__consumer_offsets,Partition=39,Replica=1],[Topic=__consumer_offsets,Partition=31,Replica=1],[Topic=__consumer_offsets,Partition=19,Replica=1],[Topic=__consumer_offsets,Partition=10,Replica=1],[Topic=__consumer_offsets,Partition=22,Replica=1],[Topic=__consumer_offsets,Partition=43,Replica=1],[Topic=__consumer_offsets,Partition=40,Replica=1],[Topic=__consumer_offsets,Partition=27,Replica=1],[Topic=__consumer_offsets,Partition=6,Replica=1],[Topic=__consumer_offsets,Partition=1,Replica=1],[Topic=__consumer_offsets,Partition=47,Replica=1],[Topic=__consumer_offsets,Partition=30,Replica=1],[Topic=__consumer_offsets,Partition=42,Replica=1],[Topic=__consumer_offsets,Partition=41,Replica=1],[Topic=test,Partition=2,Replica=1],[Topic=__consumer_offsets,Partition=3,Replica=1],[Topic=__consumer_offsets,Partition=13,Replica=1],[Topic=__consumer_offsets,Partition=4,Replica=1],[Topic=__consumer_offsets,Partition=16,Replica=1],[Topic=__consumer_offsets,Partition=46,Replica=1],[Topic=test,Partition=3,Replica=1],[Topic=__consumer_offsets,Partition=49,Replica=1],[Topic=__consumer_offsets,Partition=14,Replica=1],[Topic=__consumer_offsets,Partition=45,Replica=1],[Topic=__consumer_offsets,Partition=37,Replica=1],[Topic=__consumer_offsets,Partition=29,Replica=1],[Topic=__consumer_offsets,Partition=20,Replica=1],[Topic=__consumer_offsets,Partition=8,Replica=1],[Topic=__consumer_offsets,Partition=38,Replica=1],[Topic=__consumer_offsets,Partition=7,Replica=1],[Topic=__consumer_offsets,Partition=0,Replica=1],[Topic=__consumer_offsets,Partition=34,Replica=1],[Topic=__consumer_offsets,Partition=33,Replica=1],[Topic=__consumer_offsets,Partition=26,Replica=1],[Topic=__consumer_offsets,Partition=44,Replica=1],[Topic=__consumer_offsets,Partition=32,Replica=1],[Topic=__consumer_offsets,Partition=25,Replica=1],[Topic=__consumer_offsets,Partition=11,Replica=1],[Topic=__consumer_offsets,Partition=36,Replica=1],[Topic=test,Partition=0,Replica=1],[Topic=__consumer_offsets,Partition=12,Replica=1],[Topic=__consumer_offsets,Partition=35,Replica=1],[Topic=__consumer_offsets,Partition=15,Replica=1],[Topic=test,Partition=4,Replica=1],[Topic=__consumer_offsets,Partition=17,Replica=1],[Topic=__consumer_offsets,Partition=24,Replica=1] (kafka.controller.ControllerBrokerRequestBatch)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=28}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=48}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=5}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=21}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=2}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=18}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=23}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=9}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=39}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=31}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=19}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=10}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=22}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=43}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=40}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=27}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=6}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,701] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=1}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=47}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=30}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=42}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=41}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=test,partition=2}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=3}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=13}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=4}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=16}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=46}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=test,partition=3}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=49}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,702] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=14}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=45}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=37}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=29}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=20}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=8}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=38}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=7}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=0}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,704] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=34}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=33}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=26}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=44}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=32}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=25}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,705] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=11}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=36}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=test,partition=0}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=12}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=35}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=15}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,717] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=test,partition=4}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,718] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=17}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:14:43,718] WARN [Channel manager on controller 0]: Not sending request {controller_id=0,controller_epoch=36,delete_partitions=false,partitions=[{topic=__consumer_offsets,partition=24}]} to broker 1, since it is offline. (kafka.controller.ControllerChannelManager)
[2016-12-19 18:16:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:16:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:16:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:16:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:16:53,613] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:16:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:16:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:16:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:21:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:26:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:31:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:31:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:31:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:36:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:36:53,613] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:36:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:36:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:36:53,613] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:36:53,614] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:36:53,614] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:36:53,614] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:41:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:41:53,613] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:41:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:41:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:41:53,613] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:41:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:41:53,614] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:41:53,614] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:46:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:51:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:51:53,613] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] DEBUG [Controller 0]: preferred replicas by broker Map(2 -> Map([__consumer_offsets,47] -> List(2, 0, 1), [__consumer_offsets,29] -> List(2, 0, 1), [__consumer_offsets,41] -> List(2, 0, 1), [test,4] -> List(2, 1), [test,1] -> List(2, 0), [__consumer_offsets,17] -> List(2, 0, 1), [__consumer_offsets,14] -> List(2, 1, 0), [__consumer_offsets,26] -> List(2, 1, 0), [__consumer_offsets,20] -> List(2, 1, 0), [__consumer_offsets,5] -> List(2, 0, 1), [__consumer_offsets,8] -> List(2, 1, 0), [__consumer_offsets,23] -> List(2, 0, 1), [__consumer_offsets,11] -> List(2, 0, 1), [__consumer_offsets,44] -> List(2, 1, 0), [__consumer_offsets,32] -> List(2, 1, 0), [__consumer_offsets,35] -> List(2, 0, 1), [__consumer_offsets,38] -> List(2, 1, 0), [__consumer_offsets,2] -> List(2, 1, 0)), 1 -> Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [test,0] -> List(1, 2), [__consumer_offsets,7] -> List(1, 0, 2), [__consumer_offsets,1] -> List(1, 0, 2), [test,3] -> List(1, 0), [__consumer_offsets,16] -> List(1, 2, 0)), 0 -> Map([__consumer_offsets,30] -> List(0, 2, 1), [__consumer_offsets,39] -> List(0, 1, 2), [__consumer_offsets,18] -> List(0, 2, 1), [__consumer_offsets,0] -> List(0, 2, 1), [__consumer_offsets,24] -> List(0, 2, 1), [__consumer_offsets,33] -> List(0, 1, 2), [test,5] -> List(0, 2), [test,2] -> List(0, 1), [__consumer_offsets,21] -> List(0, 1, 2), [__consumer_offsets,3] -> List(0, 1, 2), [__consumer_offsets,12] -> List(0, 2, 1), [__consumer_offsets,15] -> List(0, 1, 2), [__consumer_offsets,48] -> List(0, 2, 1), [__consumer_offsets,6] -> List(0, 2, 1), [__consumer_offsets,42] -> List(0, 2, 1), [__consumer_offsets,27] -> List(0, 1, 2), [__consumer_offsets,45] -> List(0, 1, 2), [__consumer_offsets,36] -> List(0, 2, 1), [__consumer_offsets,9] -> List(0, 1, 2))) (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 2 is 0.000000 (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] DEBUG [Controller 0]: topics not in preferred replica Map([__consumer_offsets,19] -> List(1, 0, 2), [__consumer_offsets,10] -> List(1, 2, 0), [__consumer_offsets,40] -> List(1, 2, 0), [__consumer_offsets,22] -> List(1, 2, 0), [__consumer_offsets,13] -> List(1, 0, 2), [__consumer_offsets,49] -> List(1, 0, 2), [__consumer_offsets,28] -> List(1, 2, 0), [__consumer_offsets,4] -> List(1, 2, 0), [__consumer_offsets,37] -> List(1, 0, 2), [__consumer_offsets,31] -> List(1, 0, 2), [__consumer_offsets,34] -> List(1, 2, 0), [__consumer_offsets,46] -> List(1, 2, 0), [__consumer_offsets,25] -> List(1, 0, 2), [__consumer_offsets,43] -> List(1, 0, 2), [__consumer_offsets,7] -> List(1, 0, 2), [test,0] -> List(1, 2), [test,3] -> List(1, 0), [__consumer_offsets,1] -> List(1, 0, 2), [__consumer_offsets,16] -> List(1, 2, 0)) (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 1 is 1.000000 (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-12-19 18:56:53,612] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
